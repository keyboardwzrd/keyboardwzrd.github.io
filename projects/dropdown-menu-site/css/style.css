* {
    box-sizing: border-box;
}

body {
    margin: 0px;
    /* preferred copy font goes here */
    font-family: sans-serif; 
}
/* COMMON PAGE LAYOUT SETUP CSS - END ********************/

/*
    To create a single column layout
    with a center column:
    
    Step 1 
        Start by setting an explicit width.
        Either absolute or relative units are fine
        (although you'll probably also want to set
        a min-width if using relative units,
        as we do below).
    
    Step 2
        Next, set the auto value on the left/right 
        margin of the column.

        You can use the margin shorthand
        (margin: top/bottom left/right),

        or the individual margin side properties
        (
            margin-left: auto; 
            margin-right: auto;
        )

    That's it! We also added a background
    color below so you can see the boundaries
    of the column.
*/

.center-column {
    background-color: lightblue;

    /* Step 1 */
    width: 50%; 
    min-width: 500px;

    /* Step 2 */
    margin: 0px auto; 
}

img {
    width: 300px;
}

.center-column {
    text-align: center;
}

.spacer {
    height: 100vh;
}

#hero-3 {
    background-image: url("../images/serval3.jpg");
    height: 100vh;
    background-size: cover;
    background-position: center center;
    position: relative;
}

#hero-3 .hero-content {
    position: absolute;
    top: 0%;
    left: 10%;
}

#hero-3 h2 {
    font-size: 8vw;
    margin-bottom: 5vh;
    margin-right: 5vw;
}

#hero-3 h4 {
    font-size: 3vw;
    margin: 0px 5vw 0px 0px;
}

#hero-3 a {
    font-size: 1.5vw;
    display: inline-block;
    background-color: #333333;
    color: white;
    text-decoration: none;
    padding: 24px;
    margin: 5vh 5vw 10vh 0px;
}

#navbar {
    background: linear-gradient(to bottom, #109cb8, #0e5b96);
    display: flex;
    align-items: center;
}

#navbar a {
    display: inline-block;
    text-decoration: none;
    color: white;
    padding: 24px;
}

#navbar a:hover {
    background: linear-gradient(to top, #109cb8, #0e5b96);
}

#navbar #logo {
    margin-right: auto;
    font-weight: bold;
    font-size: 36px;
    padding-top: 13px;
    padding-bottom: 12px;
}

/*
    Dropdown styling ********************************************
*/
.dropdown-container {
    position: relative;
}

.dropdown-menu {
    position: absolute;
    opacity: 0;
    visibility: hidden;
    transition: 
        opacity 0.25s,
        visibility 0.25s;

    /*
        If your dropdown menu seems to be placed
        behind content on your page, you may need
        to include a z-index, which pull it 
        closer to you as a viewer.
    */
    z-index: 10;
}

/*
    This selector targets dropdown-containers
    that are the last child of their parent,
    and looks inside of them for a dropdown-menu.

    If found, we target it and anchor it
    to the right of its parent container
*/
.dropdown-container:last-child .dropdown-menu {
    right: 0px;
}

/*
    This is the selector responsible for
    revealing the dropdown menu.

    Note that the :hover pseudo-class is 
    attached to the CONTAINER, not the MENU.

    We can't hover over the menu when it's
    hidden; we only want it to display when
    the trigger link in the container is 
    hovered over.
*/
.dropdown-container:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
}

.dropdown-menu a {
    background-color: darkslateblue;
    width: 100%;
    min-width: 200px;
}

/*
    We need to be a bit more specific with
    our selectors in order to override the
    anchor hover state we declared earlier.

    To do so, we need to include both
    #navbar and .dropdown-menu.

    Also note, using background-color
    won't work, because in our original
    anchor hover, we used the background
    property to set a linear-gradient().

    So, to override it, we need to use
    the same shorthand background property.
*/
#navbar .dropdown-menu a:hover {
    background: slateblue;
}

